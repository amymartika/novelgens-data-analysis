-- Display each creature, its rarity, and its tag.
-- Split creatures across multiple rows if they have more than one tag.

select
    creatures.id as id,
    creatures.name as creature,
    creatures.rarity as rarity,
    tags.name as tag
from creature_tag_pairings
inner join creatures
on creature_tag_pairings.creature_id = creatures.id
inner join tags
on creature_tag_pairings.tag_id = tags.id
order by creatures.id;

-- Which creatures have the most images submitted? How rare are those creatures?

select
    creatures.name as creature,
    creatures.rarity as rarity,
    count(submitted_images.creature_id) as total_submissions
from creatures
inner join submitted_images
on creatures.id = submitted_images.creature_id
group by name, rarity
order by total_submissions desc;

-- Is there an even distribution of feedback provided for each creature?
-- Or does the data skew toward creatures that were created first?

select
    content_feedback.creature_id as creature_id,
    creatures.name as creature,
    count(*) as feedback_given,
    date(creatures.created_at) as date_created
from content_feedback
inner join creatures
on content_feedback.creature_id = creatures.id
group by creature_id, name, date_created
order by date_created;

-- What is the distribution of creatures across environments?

select 
    environments.name as environment,
    count(creatures.name) as creatures
from creature_environment_pairings
full join creatures 
on creature_environment_pairings.creature_id = creatures.id
inner join environments
on creature_environment_pairings.environment_id = environments.id
group by environment
order by creatures desc;

-- Which creatures have more than 1 user-submitted image?

select 
    i.creature_id, 
    c.name,
    count(i.id) as total_submissions
from submitted_images as i
inner join creatures as c
on i.creature_id = c.id
group by i.creature_id, c.name
having count(*) > 1
order by total_submissions desc;

-- How many claims does each creature have? 

select
    o.creature_id,
    c.name,
    count(o.id) as total_claims
from ownership_contracts as o
join creatures as c
on o.creature_id = c.id
group by o.creature_id, c.name
order by total_claims desc;

-- Which creatures have received likes?

select
    f.content_id, 
    c.name,
    count(f.id) as likes
from content_favorites as f
inner join creatures as c
on f.content_id = c.id
group by f.content_id, c.name
order by likes desc;

-- Which creatures have at least 1 submitted feedback form,
-- 1 image, AND 1 claim? 

with feedback_cte as (
select
    t.creature_id,
    t.name,
    count(t.feedback) as feedback
from (
select
    f.creature_id,
    c.name,
    case
        when interesting = true
            or comical = true
            or scary = true
            or memorable = true
            or is_unique = true
            or comforting = true
            or sad = true
            or powerful = true
            or dangerous = true
        then 'Feedback submitted'
        else 'No feedback submitted'
    end as feedback
from content_feedback as f
left join creatures as c
on f.creature_id = c.id
) t
group by t.creature_id, t.name, t.feedback
having t.feedback = 'Feedback submitted'
),
images_cte as (
    select 
    i.creature_id, 
    c.name,
    count(i.id) as images
from submitted_images as i
left join creatures as c
on i.creature_id = c.id
group by i.creature_id, c.name
having count(i.id) > 0
), 
claims_cte as (
select
    o.creature_id,
    c.name,
    count(o.id) as claims
from ownership_contracts as o
join creatures as c
on o.creature_id = c.id
group by o.creature_id, c.name
)
select *
from feedback_cte
inner join images_cte
using (creature_id)
inner join claims_cte
using (creature_id)
order by creature_id;


